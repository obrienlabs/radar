<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:tx="http://www.springframework.org/schema/tx" 
   xmlns:p="http://www.springframework.org/schema/p"
   xmlns:aop="http://www.springframework.org/schema/aop"
   xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
     http://www.springframework.org/schema/context 
      http://www.springframework.org/schema/context/spring-context-4.1.xsd 
       http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
         http://www.springframework.org/schema/aop 
          http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
   default-lazy-init="true">

    <!-- http://static.springsource.org/spring/docs/3.0.x/reference/aop.html#aop-aj-ltw-spring -->
    <!-- context:load-time-weaver weaver-class="org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver"/-->
    <!--  bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"
        p:driverClassName="org.postgresql.Driver"
        p:url="${db.url}"
        p:username="${db.user}"
        p:password="${db.password}"/-->
    <!-- bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.postgresql.Driver" />
        <property name="url" value="jdbc:postgresql://localhost:5432/nutridat" />
        <property name="username" value="postgres" />
        <property name="password" value="postgres" />
    </bean-->
    <!-- obrien.systems -->
    <!-- ÃŸbean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://dev.clck32qqdksy.us-east-1.rds.amazonaws.com:3306/biometric" />
        <property name="username" value="dev" />
        <property name="password" value="obriensystems" />
    </bean-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/nutridat" />
        <property name="username" value="root" />
        <property name="password" value="" />
    </bean>
    <!-- context:property-placeholder location="resources/db.properties"/-->
 
 <context:property-placeholder
     location="classpath*:META-INF/spring/*.properties"/>
    
    <!-- look for persistence.xml in the usual META-INF place -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
        p:dataSource-ref="dataSource">
        <!-- property name="persistenceXmlLocation" value="META-INF/persistence.xml" /-->
        <!-- The workaround for https://hibernate.onjira.com/browse/HHH-6181 requires a dummy mapping file -->
        <property name="mappingResources">
            <list><value>META-INF/orm.xml</value></list>
        </property>
        <!-- requires an anonymous @PersistenceContext and precludes need for a persistence.xml in Spring 3.1-->
        <property name="packagesToScan" value="org.obrienlabs.nutridat.business.entity"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="showSql" value="false" />
            </bean>
        </property>
        <!-- however we must not have an overriding property in hibernate.properties in the classpath -->
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>               
                <prop key="hibernate.temp.use_jdbc_metadata_defaults">true</prop>
                <prop key="javax.persistence.validation.mode">NONE</prop>
                <!-- prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop-->
                <prop key="hibernate.hbm2ddl.auto">none</prop>
                <prop key="hibernate.connection.pool_size">50</prop>
                <prop key="hibernate.max_fetch_depth">3</prop>
                <prop key="hibernate.bytecode.use_reflection_optimizer">false</prop>
                <!-- prop key="hibernate.jdbc.batch_size">5</prop>
                <prop key="hibernate.jdbc.batch_versioned_data">true</prop-->
                <prop key="hibernate.jdbc.use_streams_for_binary">true</prop> 
                <prop key="hibernate.hbm2ddl.auto">drop-create</prop>              
            </props>
        </property>
    </bean>        
    
    <context:annotation-config />
        
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
        p:dataSource-ref="dataSource"
        p:entityManagerFactory-ref="entityManagerFactory" />
        
    <tx:annotation-driven />
    
    <!--  read in DAO's via Repository annotation -->
    <context:component-scan base-package="com.obrienslabs.nutridat.business.*" use-default-filters="false" >
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" />
    </context:component-scan>
    
    <!-- in cases where the DAO's are in a separate jar - list them -->
    <bean id="daoFacadeExport" class="org.obrienlabs.nutridat.integration.DAOFacadeExportImpl"/>
</beans>


